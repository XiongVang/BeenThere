{"version":3,"sources":["webpack:///./server/strategies/mongo.localstrategy.js?069a"],"names":["passport","require","localStrategy","Strategy","User","serializeUser","user","done","id","deserializeUser","findById","err","use","passReqToCallback","usernameField","req","username","password","findOne","console","log","message","comparePassword","isMatch","module","exports"],"mappings":";;;;;;;;AAAA,KAAIA,WAAW,mBAAAC,CAAQ,CAAR,CAAf;AACA,KAAIC,gBAAgB,mBAAAD,CAAQ,CAAR,EAA0BE,QAA9C;AACA,KAAIC,OAAO,mBAAAH,CAAQ,CAAR,CAAX;;AAEA;AACA;AACA;AACAD,UAASK,aAAT,CAAuB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AAC1CA,QAAK,IAAL,EAAWD,KAAKE,EAAhB;AACD,EAFD;;AAIA;AACA;AACA;AACAR,UAASS,eAAT,CAAyB,UAASD,EAAT,EAAaD,IAAb,EAAmB;AAC1CH,QAAKM,QAAL,CAAcF,EAAd,EAAkB,UAASG,GAAT,EAAcL,IAAd,EAAoB;AACpC,SAAGK,GAAH,EAAQ;AACNJ,YAAKI,GAAL;AACD;AACDJ,UAAK,IAAL,EAAWD,IAAX;AACD,IALD;AAMD,EAPD;;AASA;AACA;AACAN,UAASY,GAAT,CAAa,OAAb,EAAsB,IAAIV,aAAJ,CAAkB;AACtCW,sBAAmB,IADmB;AAEtCC,kBAAe;AAFuB,EAAlB,EAGjB,UAASC,GAAT,EAAcC,QAAd,EAAwBC,QAAxB,EAAkCV,IAAlC,EAAwC;AACzC;AACAH,QAAKc,OAAL,CAAa,EAACF,UAAUA,QAAX,EAAb,EAAmC,UAASL,GAAT,EAAcL,IAAd,EAAoB;AACrD,SAAGK,GAAH,EAAQ;AACN,aAAMA,GAAN;AACD;AACD;AACA,SAAG,CAACL,IAAJ,EAAU;AACR;AACAa,eAAQC,GAAR,CAAY,kCAAZ;AACA,cAAOb,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACc,SAAS,wBAAV,EAAlB,CAAP;AACD,MAJD,MAIO;AACL;AACA;AACAf,YAAKgB,eAAL,CAAqBL,QAArB,EAA+B,UAASN,GAAT,EAAcY,OAAd,EAAuB;AACpD,aAAGZ,GAAH,EAAQ;AACN,iBAAMA,GAAN;AACD;;AAED,aAAGY,OAAH,EAAY;AACV;AACAJ,mBAAQC,GAAR,CAAY,6BAAZ;AACA,kBAAOb,KAAK,IAAL,EAAWD,IAAX,CAAP;AACD,UAJD,MAIO;AACL;AACAa,mBAAQC,GAAR,CAAY,uCAAZ;AACAb,gBAAK,IAAL,EAAW,KAAX,EAAkB,EAACc,SAAS,wBAAV,EAAlB;AACD;AACF,QAdD;AAeD,MA3BoD,CA2BnD;AACH,IA5BD,EAFyC,CA8BrC;AACL,EAlCmB,CAkClB;AAlCkB,EAAtB;;AAqCAG,QAAOC,OAAP,GAAiBzB,QAAjB,C","file":"0.9b41f8235b4aa108a210.hot-update.js","sourcesContent":["var passport = require('passport');\nvar localStrategy = require('passport-local').Strategy;\nvar User = require('../models/user.model');\n\n// Store this user's unique id in the session for later reference\n// Only runs during authentication\n// Stores info on req.session.passport.user\npassport.serializeUser(function(user, done) {\n  done(null, user.id);\n});\n\n// Runs on every request after user is authenticated\n// Look up the user's id in the session and use it to find them in the DB for each request\n// result is stored on req.user\npassport.deserializeUser(function(id, done) {\n  User.findById(id, function(err, user) {\n    if(err) {\n      done(err);\n    }\n    done(null, user);\n  });\n});\n\n// Does actual work of logging in\n// Called by middleware stack\npassport.use('local', new localStrategy({\n  passReqToCallback: true,\n  usernameField: 'username'\n  }, function(req, username, password, done) {\n    // mongoose stuff\n    User.findOne({username: username}, function(err, user) {\n      if(err) {\n        throw err;\n      }\n      // user variable passed to us from Mongoose if it found a match to findOne() above\n      if(!user) {\n        // user not found\n        console.log('userStrategy.js :: no user found');\n        return done(null, false, {message: 'Incorrect credentials.'});\n      } else {\n        // found user! Now check their given password against the one stored in the DB\n        // comparePassword() is defined in the schema/model file!\n        user.comparePassword(password, function(err, isMatch) {\n          if(err) {\n            throw err;\n          }\n\n          if(isMatch) {\n            // all good, populate user object on the session through serializeUser\n            console.log('userStrategy.js :: all good');\n            return(done(null, user));\n          } else {\n            // no good.\n            console.log('userStrategy.js :: password incorrect');\n            done(null, false, {message: 'Incorrect credentials.'});\n          }\n        });\n      } // end else\n    }); // end findOne\n  } // end callback\n));\n\nmodule.exports = passport;\n\n\n\n// WEBPACK FOOTER //\n// ./server/strategies/mongo.localstrategy.js"],"sourceRoot":""}